#!/usr/bin/env node

const fs = require('fs');
const { execSync } = require('child_process');

const dist = `docs-dist`;
const releaseTag = process.argv[2];

const exitOnError = err => {
  if (err) {
    console.log(err);
    process.exit(1);
  }
};

const createIfDoenstExist = (path, callback) => {
  if (!fs.existsSync(path)) {
    fs.mkdirSync(path, callback);
  }
};

createIfDoenstExist(dist, exitOnError);

createIfDoenstExist(`${dist}/versions`, exitOnError);

createIfDoenstExist(`${dist}/versions/${releaseTag}`, exitOnError);

createIfDoenstExist(`${dist}/versions/latest`, exitOnError);

execSync(
  'echo "\n" >> Backpack/src/main/java/net/skyscanner/backpack/badge/BpkBadge.kt',
  exitOnError,
);

execSync(`./gradlew :Backpack:dokka`, exitOnError);

fs.renameSync(
  `Backpack/build/javadoc/`,
  `${dist}/versions/${releaseTag}`,
  exitOnError,
);

fs.writeFile(
  `docs-dist/404.html`,
  `<!DOCTYPE html>
<html>
<meta http-equiv="refresh" content="1;url=/android/versions/${releaseTag}/backpack-android" />
<script type="text/javascript">
  const androidDocsPath = (window.location + '').split('android/versions/latest');
  if (androidDocsPath.length > 1) {
    window.location = \`/android/versions/${releaseTag}\${androidDocsPath[1]}\`;
  }
</script>
</html>
`,
  { flag: 'w' },
  exitOnError,
);

fs.writeFile(
  `docs-dist/index.html`,
  `<!DOCTYPE html>
<html>
<meta http-equiv="refresh" content="0;url=/android/versions/${releaseTag}/backpack-android" />
</html>
`,
  { flag: 'w' },
  exitOnError,
);

fs.writeFile(
  `docs-dist/versions/latest/index.html`,
  `<!DOCTYPE html>
<html>
<meta http-equiv="refresh" content="0;url=/android/versions/${releaseTag}/backpack-android" />
</html>
`,
  { flag: 'w' },
  exitOnError,
);
