/**
 * Backpack for Android - Skyscanner's Design System
 *
 * Copyright 2018 - 2025 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath libs.plugin.android
        classpath libs.plugin.kotlin
        classpath libs.plugin.dokka
        classpath libs.plugin.detekt
        classpath libs.plugin.ksp
        classpath libs.plugin.roborazzi
    }
}

plugins {
    alias(libs.plugins.compose.compiler) apply false
}

apply from: 'publish-root.gradle'
apply plugin: 'org.jetbrains.dokka'

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    apply plugin: "io.gitlab.arturbosch.detekt"

    repositories {
        google()
        mavenCentral()
    }

    detekt {
        config = files("$rootDir/.detekt.yml", "$rootDir/.detekt-compose.yml")
        buildUponDefaultConfig = true
        source = files("src", "$rootDir/buildSrc/src")
    }

    dependencies {
        detektPlugins libs.detektRules.compose
        detektPlugins libs.detektRules.formatting
        detektPlugins libs.detektRules.libraries
    }
}


ext {
    group = "net.skyscanner.backpack"
    dokkaOutputDir = "dokka"
}

// Configure Dokka 2 for multi-module documentation aggregation
dokka {
    dokkaPublications.html {
        outputDirectory = new File(rootProject.rootDir, "$rootProject.ext.dokkaOutputDir")
        moduleName = "Backpack Android"
    }
}

tasks.register("prepareDocs") {
    def dokkaProjects = ['Backpack', 'backpack-compose', 'backpack-common']
    dependsOn("dokkaGenerate", dokkaProjects.collect { ":${it}:dokkaGeneratePublicationHtml" })

    doLast {
        def outputDir = new File(rootProject.rootDir, "$rootProject.ext.dokkaOutputDir")

        // Aggregate module documentation
        dokkaProjects.each { projectName ->
            def subProject = project(":${projectName}")
            def moduleDocsDir = new File(subProject.layout.buildDirectory.asFile.get(), "dokka/html")
            def moduleOutputDir = new File(outputDir, subProject.artifactId)

            if (moduleDocsDir.exists()) {
                copy {
                    from moduleDocsDir
                    into moduleOutputDir
                }
                println "Aggregated documentation from ${projectName}"
            }
        }

        // Copy docs directory to dokka output and fix image URLs
        def docsSource = new File(rootProject.rootDir, "docs")
        def docsDest = new File(outputDir, "docs")

        if (docsSource.exists()) {
            copy {
                from docsSource
                into docsDest
                include "**/*"
            }

            // Fix image URLs in README files
            fileTree(docsDest) {
                include "**/*.md"
            }.each { file ->
                def content = file.text
                def updatedContent = content.replaceAll('Skyscanner/backpack-android', 'backpack/android')
                if (content != updatedContent) {
                    file.text = updatedContent
                    println "Fixed image URLs in ${file.name}"
                }
            }

            println "Copied component documentation with fixed image URLs"
        }
    }
}

tasks.register('installGitHooks', Copy) {
    from new File(rootProject.rootDir, 'hooks/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
}

tasks.getByPath(':app:preBuild').dependsOn installGitHooks
