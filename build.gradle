/**
 * Backpack for Android - Skyscanner's Design System
 *
 * Copyright 2018 - 2025 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath libs.plugin.android
        classpath libs.plugin.kotlin
        classpath libs.plugin.dokka
        classpath libs.plugin.detekt
        classpath libs.plugin.ksp
        classpath libs.plugin.roborazzi
    }
}

plugins {
    alias(libs.plugins.compose.compiler) apply false
}

apply from: 'publish-root.gradle'
apply plugin: 'org.jetbrains.dokka'

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    apply plugin: "io.gitlab.arturbosch.detekt"

    repositories {
        google()
        mavenCentral()
    }

    // Ensure all Java compilation uses Java Toolchain 17
    tasks.withType(JavaCompile).configureEach {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    // Ensure all Kotlin (Android/JVM) uses JDK 17 toolchain
    plugins.withId("org.jetbrains.kotlin.android") {
        kotlin {
            jvmToolchain(17)
        }
    }
    plugins.withId("org.jetbrains.kotlin.jvm") {
        kotlin {
            jvmToolchain(17)
        }
    }

    detekt {
        config = files("$rootDir/.detekt.yml", "$rootDir/.detekt-compose.yml")
        buildUponDefaultConfig = true
        source = files("src", "$rootDir/buildSrc/src")
    }

    dependencies {
        detektPlugins libs.detektRules.compose
        detektPlugins libs.detektRules.formatting
        detektPlugins libs.detektRules.libraries
    }
}


ext {
    group = "net.skyscanner.backpack"
    dokkaOutputDir = "dokka"
}

dokka {
    dokkaPublications.html {
        outputDirectory = new File(rootProject.rootDir, "$rootProject.ext.dokkaOutputDir")
    }
}

tasks.register("createDokka404") {
    dependsOn("dokkaGenerate")
    doLast {
        createNewFile(rootProject.rootDir, "$rootProject.ext.dokkaOutputDir/404.html").text = """<!DOCTYPE html>
<html>
  <meta http-equiv="refresh" content="1;url=/android" />
</html>
"""
    }
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'hooks/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
}

tasks.getByPath(':app:preBuild').dependsOn installGitHooks

static File createNewFile(File parent, String path) {
    def file = new File(parent, path)
    file.parentFile.mkdirs()
    file.createNewFile()
    return file
}
