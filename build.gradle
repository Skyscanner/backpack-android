/**
 * Backpack for Android - Skyscanner's Design System
 *
 * Copyright 2018 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext.kotlin_version = '1.8.10'
  ext.compose_compiler_version = '1.4.2'
  ext.ksp_version = '1.8.10-1.0.9'
  ext.detekt_version = '1.22.0'
  ext.dokka = "org.jetbrains.dokka:dokka-gradle-plugin:1.7.20"
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:7.4.1' // keep in sync with lint version - If the Gradle plugin version is X.Y.Z, then the lint version is (X+23).Y.Z.
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath dokka
    classpath 'com.karumi:shot:5.14.1'
    classpath 'io.github.gradle-nexus:publish-plugin:1.2.0'
    classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:$ksp_version"
  }
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply from: 'publish-root.gradle'
apply plugin: 'org.jetbrains.dokka'

allprojects {
  repositories {
    google()
    mavenCentral()
  }
}

subprojects {
  apply plugin: "io.gitlab.arturbosch.detekt"

  repositories {
    google()
    mavenCentral()
  }

  detekt {
    config = files("$rootDir/.detekt.yml", "$rootDir/.detekt-compose.yml")
    buildUponDefaultConfig = true
  }

  dependencies {
    detektPlugins "io.nlopez.compose.rules:detekt:0.1.1"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-rules-libraries:$detekt_version"
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

ext {
  group = "net.skyscanner.backpack"
  dokkaOutputDir = "dokka"

  androidxAppCompat = "androidx.appcompat:appcompat:1.6.1"
  androidxAnnotations = "androidx.annotation:annotation:1.6.0"

  lifecycleVersion = "2.5.1"
  androidXLifecycleKtx = "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
  // The below dependencies can be removed once the following issue is fixed: https://issuetracker.google.com/issues/238425626
  androidXLifecycleViewmodel = "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
  androidXLifecycleViewmodelKtx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

  threeTenAbpVersion = "1.4.4"
  threeTenAbp = "org.threeten:threetenbp:$threeTenAbpVersion"
  threeTenAbpAndroid = "com.jakewharton.threetenabp:threetenabp:$threeTenAbpVersion"

  androidXJunitVersion = "1.1.5"
  junitKtx = "androidx.test.ext:junit-ktx:$androidXJunitVersion"
  junitAndroid = "androidx.test.ext:junit:$androidXJunitVersion"

  androidMaterial = "com.google.android.material:material:1.8.0"
  cardView = "androidx.cardview:cardview:1.0.0"
  googleMaps = "com.google.android.gms:play-services-maps:18.1.0"
  googleMapsCompose = "com.google.maps.android:maps-compose:2.10.0"
  constraintLayout = "androidx.constraintlayout:constraintlayout:2.1.4"
  swiperefreshLayout = "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
  picasso = "com.squareup.picasso:picasso:2.71828"
  ktx = "androidx.core:core-ktx:1.9.0"
  testCoreKtx = "androidx.test:core-ktx:1.5.0"
  kotlinReflection = "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  junit = "junit:junit:4.13.2"
  stetho = "com.facebook.stetho:stetho:1.6.0"
  facebookSnapshotTestingCore = "com.facebook.testing.screenshot:core:0.15.0"
  espressoCore = "androidx.test.espresso:espresso-core:3.5.1"
  espressoContrib = "com.android.support.test.espresso:espresso-contrib:3.1.0"
  testRules = "androidx.test:rules:1.5.0"
  mockitoKotlin = "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
  mockitoAndroid = "org.mockito:mockito-android:5.1.1"

  kotlinPoet = "com.squareup:kotlinpoet:1.12.0"
  roomCompilerProcessing = "androidx.room:room-compiler-processing:2.5.0"
  kspApi = "com.google.devtools.ksp:symbol-processing-api:$ksp_version"

  coroutinesVersion = "1.6.4"
  coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
  coroutinesTest = "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

  lintVersion = "30.4.1"
  lint = "com.android.tools.lint:lint:$lintVersion"
  lintApi = "com.android.tools.lint:lint-api:$lintVersion"
  lintTests = "com.android.tools.lint:lint-tests:$lintVersion"

  composeVersion = "2023.01.00"
  composeBom = dependencies.platform("androidx.compose:compose-bom:$composeVersion")
  composeUi = [composeBom, "androidx.compose.ui:ui"]
  composeFoundation = [composeBom, "androidx.compose.foundation:foundation"]
  composeRuntime = [composeBom, "androidx.compose.runtime:runtime"]
  composeMaterial = [composeBom, "androidx.compose.material:material"]
  composeUiToolingPreview = [composeBom, "androidx.compose.ui:ui-tooling-preview"]
  composeTestJUnit = [composeBom, "androidx.compose.ui:ui-test-junit4"]
  composeUiTooling = [composeBom, "androidx.compose.ui:ui-tooling"]
  composeUiTestManifest = [composeBom, "androidx.compose.ui:ui-test-manifest"]
  composeUtil = [composeBom, "androidx.compose.ui:ui-util"]
  composeTestManifest = [composeBom, "androidx.compose.ui:ui-test-manifest"]
  composeActivity = "androidx.activity:activity-compose:1.6.1"

  // update this alongside with Compose version
  destinationsVersion = "1.7.34-beta"
  destinationsCore = "io.github.raamcosta.compose-destinations:animations-core:$destinationsVersion"
  destinationsKsp = "io.github.raamcosta.compose-destinations:ksp:$destinationsVersion"

  // update this alongside with Compose version
  accompanistVersion = "0.28.0"
  accompanistFlowLayout = "com.google.accompanist:accompanist-flowlayout:$accompanistVersion"
  accompanistPager = "com.google.accompanist:accompanist-pager:$accompanistVersion"
}

tasks.dokkaHtmlMultiModule.configure {
  outputDirectory = new File(rootProject.rootDir, "$rootProject.ext.dokkaOutputDir")
  doLast {
    createNewFile(rootProject.rootDir, "$rootProject.ext.dokkaOutputDir/404.html").text = """<!DOCTYPE html>
<html>
  <meta http-equiv="refresh" content="1;url=/android" />
</html>
"""
  }
}

task installGitHooks() {
  def command = Runtime.getRuntime().exec("git config core.hooksPath")
  def currentGitHookDir = command.inputStream.text.trim()
  def hooksPath = "hooks"
  if (currentGitHookDir != hooksPath) {
    Runtime.getRuntime().exec("git config --local core.hooksPath ${hooksPath}")
    Runtime.getRuntime().exec("chmod -R +x ${hooksPath}")
  }
}

tasks.getByPath(':app:preBuild').dependsOn installGitHooks

static File createNewFile(File parent, String path) {
  def file = new File(parent, path)
  file.parentFile.mkdirs()
  file.createNewFile()
  return file
}
