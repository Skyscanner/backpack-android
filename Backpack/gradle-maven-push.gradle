apply plugin: 'maven-publish'
apply plugin: 'signing'

def artifactoryURL = "https://artifactory.skyscannertools.net/artifactory/infrastructure-maven"

task sourceJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier "source"
}

artifacts {
  archives sourceJar
}

def localProperties = new Properties()
if (rootProject.file("local.properties").exists()) {
  localProperties.load(rootProject.file("local.properties").newDataInputStream())
}

afterEvaluate { project ->

  project.ext.getJFrogUsername = {
    def result = localProperties.getProperty("SKYSCANNER_ARTIFACTORY_OWNER")
    if (result == null) {
      return ""
    }
    return result
  }

  project.ext.getJFrogPassword = {
    def result = localProperties.getProperty("SKYSCANNER_ARTIFACTORY_TOKEN")
    if (result == null) {
      return ""
    }
    return result
  }

  publishing {
    publications {
      maven(MavenPublication) {
        groupId group
        artifactId 'backpack-android'
        version "$version"

        from components.release
        artifact sourceJar

        pom {
          name = 'backpack-android'
          description = "Backpack is a collection of design resources, reusable components and guidelines for creating Skyscanner's products."
          url = 'https://github.com/Skyscanner/backpack-android'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'https://github.com/Skyscanner/backpack-android/blob/main/LICENSE.txt'
            }
          }
          developers {
            developer {
              id = 'skyscanner'
              name = 'Skyscanner Open Source'
              email = 'koalasquad@skyscanner.net'
            }
          }
          scm {
            connection = 'scm:git:git://github.com/Skyscanner/backpack-android.git'
            developerConnection = 'scm:git:ssh://github.com/Skyscanner/backpack-android.git'
            url = 'http://github.com/Skyscanner/backpack-android/tree/main'
          }
        }
        pom.withXml {
          def dependenciesNode = asNode().appendNode('dependencies')
          //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
          project.configurations.implementation.allDependencies.each {
            if (it.group != null && (it.name != null || "unspecified" == it.name) && it.version != null) {
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', it.group)
              dependencyNode.appendNode('artifactId', it.name)
              dependencyNode.appendNode('version', it.version)
            }
          }
        }
      }
    }

    repositories {
      maven {
        url "$artifactoryURL"
        credentials {
          username "${project.getJFrogUsername()}"
          password "${project.getJFrogPassword()}"
        }
      }
    }
  }

  task checkMavenCredentials(type: Exec) {
    outputs.upToDateWhen { false }
    workingDir './'
    commandLine(['curl',
                 '--silent',
                 '--fail',
                 '-I',
                 '-u',
                 "${project.getJFrogUsername()}:${project.getJFrogPassword()}",
                 "$artifactoryURL"])
  }
}

signing {
  sign publishing.publications
}

