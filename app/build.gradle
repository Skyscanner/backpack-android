/**
 * Backpack for Android - Skyscanner's Design System
 *
 * Copyright 2018 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'shot'
apply plugin: 'com.google.devtools.ksp'

apply from: "$rootProject.projectDir/android-configuration.gradle"
apply from: "screenshots.gradle"

def properties = new Properties()
properties.putAll(System.getenv())
if (rootProject.file("local.properties").exists()) {
  properties.load(rootProject.file("local.properties").newDataInputStream())
}

android {
  defaultConfig {
    applicationId 'net.skyscanner.backpack'
    versionCode 1
    versionName "🐨"

    testInstrumentationRunner "net.skyscanner.backpack.BpkTestRunner"
    testInstrumentationRunnerArgument "notClass", "net.skyscanner.backpack.docs.GenerateScreenshots"
    testInstrumentationRunnerArgument "variant", project.findProperty("directorySuffix") ?: "default"

    manifestPlaceholders = [ MAPS_API_KEY : properties.getProperty("MAPS_API_KEY", "") ]
  }

  signingConfigs {
    release {
      storeFile rootProject.file('backpack.android.demo.key')
      storePassword properties.getProperty('KEYSTORE_PASSWORD')
      keyAlias properties.getProperty('KEYSTORE_ALIAS')
      keyPassword properties.getProperty('KEYSTORE_ALIAS_PASSWORD')
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }
  namespace 'net.skyscanner.backpack.demo'
  flavorDimensions "version"
  productFlavors {
    oss {
      dimension "version"
      versionNameSuffix "-oss"
    }
    internal {
      dimension "version"
      versionNameSuffix "-internal"
    }
  }
  testOptions {
    animationsDisabled = true
  }
  flavorDimensions "version"
  productFlavors {
    oss {
      dimension "version"
    }
    internal {
      dimension "version"
    }
  }
  buildFeatures {
    compose true
  }
  composeOptions {
    kotlinCompilerExtensionVersion compose_compiler_version
  }
  packagingOptions {
    exclude "**/attach_hotspot_windows.dll"
    exclude "META-INF/licenses/**"
    exclude "META-INF/AL2.0"
    exclude "META-INF/LGPL2.1"
  }

  // a fix for IDE to see KSP-generated files
  // also fixed conflicting overloads error when switching flavours
  applicationVariants.all { variant ->
    variant.addJavaSourceFoldersToModel(
      new File(buildDir, "generated/ksp/${variant.name}/kotlin")
    )
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation rootProject.ext.picasso
  implementation rootProject.ext.accompanistFlowLayout
  implementation rootProject.ext.androidXLifecycleKtx
  implementation rootProject.ext.composeActivity
  implementation rootProject.ext.kotlinReflection
  implementation rootProject.ext.stetho
  implementation rootProject.ext.googleMapsCompose
  implementation rootProject.ext.destinationsCore
  implementation rootProject.ext.accompanistPager
  testImplementation rootProject.ext.junit
  debugImplementation rootProject.ext.composeTestManifest
  androidTestImplementation rootProject.ext.composeFoundation
  androidTestImplementation rootProject.ext.testCoreKtx
  androidTestImplementation rootProject.ext.junitKtx
  androidTestImplementation rootProject.ext.junitAndroid
  androidTestImplementation rootProject.ext.espressoCore
  androidTestImplementation rootProject.ext.espressoContrib
  androidTestImplementation rootProject.ext.testRules
  androidTestImplementation rootProject.ext.coroutinesTest
  androidTestImplementation rootProject.ext.composeTestJUnit
  androidTestImplementation rootProject.ext.facebookSnapshotTestingCore
  implementation project(':Backpack')
  implementation project(':backpack-compose')
  ksp project(":meta-processor")
  ksp rootProject.ext.destinationsKsp
}
