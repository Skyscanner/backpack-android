/**
 * Backpack for Android - Skyscanner's Design System
 *
 * Copyright 2018 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'shot'
apply plugin: 'com.google.devtools.ksp'

apply from: "$rootProject.projectDir/android-configuration.gradle"
apply from: "screenshots.gradle"

def properties = new Properties()
properties.putAll(System.getenv())
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

android {
    defaultConfig {
        applicationId 'net.skyscanner.backpack'
        versionCode 1
        versionName "üê®"

        testInstrumentationRunner "net.skyscanner.backpack.BpkTestRunner"
        testInstrumentationRunnerArgument "notClass", "net.skyscanner.backpack.docs.GenerateScreenshots"
        testInstrumentationRunnerArgument "variant", project.findProperty("directorySuffix") ?: "default"

        manifestPlaceholders = [MAPS_API_KEY: properties.getProperty("MAPS_API_KEY", "")]
    }

    signingConfigs {
        release {
            storeFile rootProject.file('backpack.android.demo.key')
            storePassword properties.getProperty('KEYSTORE_PASSWORD')
            keyAlias properties.getProperty('KEYSTORE_ALIAS')
            keyPassword properties.getProperty('KEYSTORE_ALIAS_PASSWORD')
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    namespace 'net.skyscanner.backpack.demo'
    flavorDimensions "version"
    productFlavors {
        oss {
            dimension "version"
            versionNameSuffix "-oss"
        }
        internal {
            dimension "version"
            versionNameSuffix "-internal"
        }
    }
    testOptions {
        animationsDisabled = true
    }
    flavorDimensions "version"
    productFlavors {
        oss {
            dimension "version"
        }
        internal {
            dimension "version"
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composeCompiler.get()
    }
    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
}

ksp {
    arg("docsDir", "$rootProject.projectDir/docs2/Compose")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.square.picasso
    implementation libs.accompanist.flowLayout
    implementation libs.androidx.lifecycleKtx
    implementation libs.compose.activity
    implementation libs.kotlin.reflection
    implementation libs.destinations.core
    implementation libs.accompanist.pager
    testImplementation libs.test.junit
    debugImplementation libs.compose.uiToolingTestManifest
    androidTestImplementation libs.compose.foundation
    androidTestImplementation libs.test.coreKtx
    androidTestImplementation libs.test.junitKtx
    androidTestImplementation libs.test.junitAndroid
    androidTestImplementation libs.test.espressoCore
    androidTestImplementation libs.test.espressoContrib
    androidTestImplementation libs.test.rules
    androidTestImplementation libs.test.coroutines
    androidTestImplementation libs.test.compose
    androidTestImplementation libs.test.facebookSnapshotTestingCore
    implementation project(':Backpack')
    implementation project(':backpack-compose')
    ksp project(":meta-processor")
    ksp libs.destinations.ksp

    def composeBom = platform(libs.compose.bom)
    implementation composeBom
    debugImplementation composeBom
    androidTestImplementation composeBom
}
