name: CI

on:
  push:
    branches: [main]
    tags: ['*.*.*']
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash -l {0}

env:
  flavour: oss
  config: debug
  api-level: 24

jobs:

  Node:
    name: Node
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup NPM
        run: |
          nvm install
          npm install --global gulp-cli

      - name: NPM CI
        run: |
          nvm use
          npm ci

      - name: ESLint check
        run: npm run lint

      - name: Danger check
        run: npm run danger
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: npm run build

      - name: Tokens check
        run: |
          gulp
          ./scripts/check-no-changes.sh

  Java:
    name: Java
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        module: [app, Backpack]
        include:
          - module: app
            flavour: 'oss'
          - module: Backpack
            flavour: ''

    steps:
      - uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build
        run: ./gradlew :${{ matrix.module }}:assemble${{ matrix.flavour }}${{ env.config }} -PdisablePreDex

      - name: KtLint check
        run: ./gradlew :${{ matrix.module }}:${{ env.module }}:ktlint -PdisablePreDex

      - name: Lint check
        run: ./gradlew :${{ matrix.module }}:lint${{ matrix.flavour }}${{ env.config }} -PdisablePreDex

      - name: Unit Tests
        run: ./gradlew :${{ matrix.module }}:test${{ matrix.flavour }}${{ env.config }}UnitTest -PdisablePreDex

  Android:
    name: Android
    runs-on: macos-latest

    strategy:
      fail-fast: false

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: google_apis
          profile: Nexus 4
          sdcard-path-or-size: 512M
          api-level: ${{ env.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Android Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: google_apis
          profile: Nexus 4
          sdcard-path-or-size: 512M
          api-level: ${{ env.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: ./gradlew :Backpack:connected${{ env.config }}AndroidTest

  Screenshots:
    name: Screenshots
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        variant:
          - default
          - themed
          - rtl
          - dm

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '2.x'

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: google_apis
          profile: Nexus 4
          sdcard-path-or-size: 512M
          api-level: ${{ env.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Screenshot Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: google_apis
          profile: Nexus 4
          sdcard-path-or-size: 512M
          api-level: ${{ env.api-level }}
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: |
            sudo easy_install Pillow==6.2.2
            ./gradlew :app:record${{ env.flavour }}${{ env.config }}AndroidTestScreenshotTest -Pandroid.testInstrumentationRunnerArguments.variant=${{ matrix.variant }}
            ./scripts/check-no-changes.sh

      - name: Upload Screenshot Tests Artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.flavour }}${{ env.config }}-screenshot-test-output
          path: app/build/screenshots${{ env.flavour }}${{ env.config }}AndroidTest/
          retention-days: 5

  Deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [Node, Java, Android, Screenshots]

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get release tag
        if: contains('refs/tags/', github.ref)
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Build Dokka Docs
        if: contains('refs/tags/', github.ref)
        run: |
          nvm install
          nvm use
          set -e
          ./scripts/build-docs-ci ${{steps.tag.outputs.tag}}

      - name: Deploy Docs Site
        if: github.ref == 'refs/heads/main'
        run: |
          curl -f -s -X POST -H "Content-Type: application/json" -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -d "{\"ref\":\"main\",\"inputs\":{\"repo\":\"backpack-android\"}}" https://api.github.com/repos/Skyscanner/backpack-docs/actions/workflows/ci.yml/dispatches
        env:
          GITHUB_TOKEN: ${{ secrets.BACKPACK_DOCS_DEPLOY_TOKEN }}

      - name: Building release APK
        if: contains('refs/tags/', github.ref)
        run: |
          openssl aes-256-cbc -K $KEYSTORE_DECRYPT_KEY -iv $KEYSTORE_DECRYPT_IV -in backpack.android.demo.key.enc -out backpack.android.demo.key -d;
          ./gradlew :app:assemble${{ env.flavour }}Release -PdisablePreDex
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          KEYSTORE_ALIAS_PASSWORD: ${{ secrets.KEYSTORE_ALIAS_PASSWORD }}
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
          KEYSTORE_DECRYPT_KEY: ${{ secrets.KEYSTORE_DECRYPT_KEY }}
          KEYSTORE_DECRYPT_IV: ${{ secrets.KEYSTORE_DECRYPT_IV }}

      - name: Publish Release APK to AppCenter
        if: contains('refs/tags/', github.ref)
        uses: devussy/AppCenter-Distribute-Github-Action@v1.0.2
        with:
          app: Backpack/Backpack-Android
          token: ${{secrets.APP_CENTER_TOKEN}}
          group: Everyone
          file: app/build/outputs/apk/oss/release/app-${{ env.flavour }}-release.apk
          silent: true
          releaseNotes: Version ${{steps.tag.outputs.tag}}
